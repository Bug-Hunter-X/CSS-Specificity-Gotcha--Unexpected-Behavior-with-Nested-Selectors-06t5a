The issue can be solved by using more specific selectors or by adjusting the order of the CSS rules and increasing the specificity of the `.parent .child` selector.  Here are two approaches:

**Approach 1: Increasing Specificity**

Add an `id` to the parent element and use it in the more specific selector.

```css
#parent .child {
  color: blue;
}

.child {
  color: red;
}
```

**Approach 2: Using `!important` (Generally Avoid)**

While this is possible, it is generally bad practice:

```css
.parent .child {
  color: blue !important;
}

.child {
  color: red;
}
```
This will force `.parent .child` to always have a higher specificity, however, generally, one should try to avoid this practice.

The best solution depends on the overall structure of the CSS and the design choices.   It's usually best to avoid overusing `!important`.  Understanding and utilizing CSS specificity correctly is crucial for building maintainable and predictable web applications.